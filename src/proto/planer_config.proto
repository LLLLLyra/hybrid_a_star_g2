syntax = "proto2";

package planing;

message PlannerOpenSpaceConfig {
  // // Open Space ROIConfig
  // optional ROIConfig roi_config = 1;
  // Hybrid A Star Warm Start
  optional WarmStartConfig warm_start_config = 2;
  // // Dual Variable Warm Start
  // optional DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
  // // Distance Approach Configs
  // optional DistanceApproachConfig distance_approach_config = 4;
  // // Iterative Anchoring Configs
  // optional IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
  // // Trajectory PartitionConfig Configs
  // optional TrajectoryPartitionConfig trajectory_partition_config = 6;
  optional float delta_t = 7 [ default = 1.0 ];
  optional double is_near_destination_threshold = 8 [ default = 0.001 ];
  optional bool enable_check_parallel_trajectory = 9 [ default = false ];
  optional bool enable_linear_interpolation = 10 [ default = false ];
  optional double is_near_destination_theta_threshold = 11 [ default = 0.05 ];
}

message WarmStartConfig {
  // Hybrid a star for warm start
  optional double xy_grid_resolution = 1 [ default = 0.1 ];
  optional double phi_grid_resolution = 2 [ default = 0.005 ];
  optional uint64 next_node_num = 3 [ default = 10 ];
  optional double step_size = 4 [ default = 0.05 ];
  optional double traj_forward_penalty = 5 [ default = 0.0 ];
  optional double traj_back_penalty = 6 [ default = 0.0 ];
  optional double traj_gear_switch_penalty = 7 [ default = 0.0 ];
  optional double traj_steer_penalty = 8 [ default = 50.0 ];
  optional double traj_steer_change_penalty = 9 [ default = 25.0 ];
  // Grid a star for heuristic
  optional double grid_a_star_xy_resolution = 15 [ default = 0.1 ];
  optional double node_radius = 16 [ default = 0.5 ];
  optional PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
}

message PiecewiseJerkSpeedOptimizerConfig {
  optional double acc_weight = 1 [ default = 1.0 ];
  optional double jerk_weight = 2 [ default = 10.0 ];
  optional double kappa_penalty_weight = 3 [ default = 1000.0 ];
  optional double ref_s_weight = 4 [ default = 10.0 ];
  optional double ref_v_weight = 5 [ default = 10.0 ];
}