// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_parameters.proto

#ifndef PROTOBUF_INCLUDED_vehicle_5fparameters_2eproto
#define PROTOBUF_INCLUDED_vehicle_5fparameters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_5fparameters_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_5fparameters_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_vehicle_5fparameters_2eproto();
namespace vehicle {
class VehicleParam;
class VehicleParamDefaultTypeInternal;
extern VehicleParamDefaultTypeInternal _VehicleParam_default_instance_;
}  // namespace vehicle
namespace google {
namespace protobuf {
template<> ::vehicle::VehicleParam* Arena::CreateMaybeMessage<::vehicle::VehicleParam>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace vehicle {

// ===================================================================

class VehicleParam :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vehicle.VehicleParam) */ {
 public:
  VehicleParam();
  virtual ~VehicleParam();

  VehicleParam(const VehicleParam& from);

  inline VehicleParam& operator=(const VehicleParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleParam(VehicleParam&& from) noexcept
    : VehicleParam() {
    *this = ::std::move(from);
  }

  inline VehicleParam& operator=(VehicleParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VehicleParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleParam* internal_default_instance() {
    return reinterpret_cast<const VehicleParam*>(
               &_VehicleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VehicleParam* other);
  friend void swap(VehicleParam& a, VehicleParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleParam* New() const final {
    return CreateMaybeMessage<VehicleParam>(nullptr);
  }

  VehicleParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleParam& from);
  void MergeFrom(const VehicleParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float max_abs_speed_when_stopped = 19 [default = 0.1];
  bool has_max_abs_speed_when_stopped() const;
  void clear_max_abs_speed_when_stopped();
  static const int kMaxAbsSpeedWhenStoppedFieldNumber = 19;
  float max_abs_speed_when_stopped() const;
  void set_max_abs_speed_when_stopped(float value);

  // optional double front_edge_to_center = 3 [default = 3.524];
  bool has_front_edge_to_center() const;
  void clear_front_edge_to_center();
  static const int kFrontEdgeToCenterFieldNumber = 3;
  double front_edge_to_center() const;
  void set_front_edge_to_center(double value);

  // optional double back_edge_to_center = 4 [default = 1.2];
  bool has_back_edge_to_center() const;
  void clear_back_edge_to_center();
  static const int kBackEdgeToCenterFieldNumber = 4;
  double back_edge_to_center() const;
  void set_back_edge_to_center(double value);

  // optional double left_edge_to_center = 5 [default = 1.1];
  bool has_left_edge_to_center() const;
  void clear_left_edge_to_center();
  static const int kLeftEdgeToCenterFieldNumber = 5;
  double left_edge_to_center() const;
  void set_left_edge_to_center(double value);

  // optional double right_edge_to_center = 6 [default = 1.1];
  bool has_right_edge_to_center() const;
  void clear_right_edge_to_center();
  static const int kRightEdgeToCenterFieldNumber = 6;
  double right_edge_to_center() const;
  void set_right_edge_to_center(double value);

  // optional double length = 7 [default = 4.724];
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 7;
  double length() const;
  void set_length(double value);

  // optional double width = 8 [default = 1.9];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 8;
  double width() const;
  void set_width(double value);

  // optional double height = 9 [default = 1.5];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 9;
  double height() const;
  void set_height(double value);

  // optional double min_turn_radius = 10 [default = 4.9];
  bool has_min_turn_radius() const;
  void clear_min_turn_radius();
  static const int kMinTurnRadiusFieldNumber = 10;
  double min_turn_radius() const;
  void set_min_turn_radius(double value);

  // optional double max_acceleration = 11 [default = 8];
  bool has_max_acceleration() const;
  void clear_max_acceleration();
  static const int kMaxAccelerationFieldNumber = 11;
  double max_acceleration() const;
  void set_max_acceleration(double value);

  // optional double max_deceleration = 12 [default = -8];
  bool has_max_deceleration() const;
  void clear_max_deceleration();
  static const int kMaxDecelerationFieldNumber = 12;
  double max_deceleration() const;
  void set_max_deceleration(double value);

  // optional double max_steer_angle = 13 [default = 8.7266462599716466];
  bool has_max_steer_angle() const;
  void clear_max_steer_angle();
  static const int kMaxSteerAngleFieldNumber = 13;
  double max_steer_angle() const;
  void set_max_steer_angle(double value);

  // optional double max_steer_angle_rate = 14 [default = 8.55211];
  bool has_max_steer_angle_rate() const;
  void clear_max_steer_angle_rate();
  static const int kMaxSteerAngleRateFieldNumber = 14;
  double max_steer_angle_rate() const;
  void set_max_steer_angle_rate(double value);

  // optional double min_steer_angle_rate = 15 [default = nan];
  bool has_min_steer_angle_rate() const;
  void clear_min_steer_angle_rate();
  static const int kMinSteerAngleRateFieldNumber = 15;
  double min_steer_angle_rate() const;
  void set_min_steer_angle_rate(double value);

  // optional double steer_ratio = 16 [default = 17.14335423];
  bool has_steer_ratio() const;
  void clear_steer_ratio();
  static const int kSteerRatioFieldNumber = 16;
  double steer_ratio() const;
  void set_steer_ratio(double value);

  // optional double wheel_base = 17 [default = 2.72];
  bool has_wheel_base() const;
  void clear_wheel_base();
  static const int kWheelBaseFieldNumber = 17;
  double wheel_base() const;
  void set_wheel_base(double value);

  // optional double wheel_rolling_radius = 18 [default = nan];
  bool has_wheel_rolling_radius() const;
  void clear_wheel_rolling_radius();
  static const int kWheelRollingRadiusFieldNumber = 18;
  double wheel_rolling_radius() const;
  void set_wheel_rolling_radius(double value);

  // optional double brake_deadzone = 20 [default = nan];
  bool has_brake_deadzone() const;
  void clear_brake_deadzone();
  static const int kBrakeDeadzoneFieldNumber = 20;
  double brake_deadzone() const;
  void set_brake_deadzone(double value);

  // optional double throttle_deadzone = 21 [default = nan];
  bool has_throttle_deadzone() const;
  void clear_throttle_deadzone();
  static const int kThrottleDeadzoneFieldNumber = 21;
  double throttle_deadzone() const;
  void set_throttle_deadzone(double value);

  // @@protoc_insertion_point(class_scope:vehicle.VehicleParam)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float max_abs_speed_when_stopped_;
  double front_edge_to_center_;
  double back_edge_to_center_;
  double left_edge_to_center_;
  double right_edge_to_center_;
  double length_;
  double width_;
  double height_;
  double min_turn_radius_;
  double max_acceleration_;
  double max_deceleration_;
  double max_steer_angle_;
  double max_steer_angle_rate_;
  double min_steer_angle_rate_;
  double steer_ratio_;
  double wheel_base_;
  double wheel_rolling_radius_;
  double brake_deadzone_;
  double throttle_deadzone_;
  friend struct ::TableStruct_vehicle_5fparameters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleParam

// optional double front_edge_to_center = 3 [default = 3.524];
inline bool VehicleParam::has_front_edge_to_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleParam::clear_front_edge_to_center() {
  front_edge_to_center_ = 3.524;
  _has_bits_[0] &= ~0x00000002u;
}
inline double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.front_edge_to_center)
  return front_edge_to_center_;
}
inline void VehicleParam::set_front_edge_to_center(double value) {
  _has_bits_[0] |= 0x00000002u;
  front_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.front_edge_to_center)
}

// optional double back_edge_to_center = 4 [default = 1.2];
inline bool VehicleParam::has_back_edge_to_center() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleParam::clear_back_edge_to_center() {
  back_edge_to_center_ = 1.2;
  _has_bits_[0] &= ~0x00000004u;
}
inline double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.back_edge_to_center)
  return back_edge_to_center_;
}
inline void VehicleParam::set_back_edge_to_center(double value) {
  _has_bits_[0] |= 0x00000004u;
  back_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.back_edge_to_center)
}

// optional double left_edge_to_center = 5 [default = 1.1];
inline bool VehicleParam::has_left_edge_to_center() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleParam::clear_left_edge_to_center() {
  left_edge_to_center_ = 1.1;
  _has_bits_[0] &= ~0x00000008u;
}
inline double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.left_edge_to_center)
  return left_edge_to_center_;
}
inline void VehicleParam::set_left_edge_to_center(double value) {
  _has_bits_[0] |= 0x00000008u;
  left_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.left_edge_to_center)
}

// optional double right_edge_to_center = 6 [default = 1.1];
inline bool VehicleParam::has_right_edge_to_center() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VehicleParam::clear_right_edge_to_center() {
  right_edge_to_center_ = 1.1;
  _has_bits_[0] &= ~0x00000010u;
}
inline double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.right_edge_to_center)
  return right_edge_to_center_;
}
inline void VehicleParam::set_right_edge_to_center(double value) {
  _has_bits_[0] |= 0x00000010u;
  right_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.right_edge_to_center)
}

// optional double length = 7 [default = 4.724];
inline bool VehicleParam::has_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VehicleParam::clear_length() {
  length_ = 4.724;
  _has_bits_[0] &= ~0x00000020u;
}
inline double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.length)
  return length_;
}
inline void VehicleParam::set_length(double value) {
  _has_bits_[0] |= 0x00000020u;
  length_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.length)
}

// optional double width = 8 [default = 1.9];
inline bool VehicleParam::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VehicleParam::clear_width() {
  width_ = 1.9;
  _has_bits_[0] &= ~0x00000040u;
}
inline double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.width)
  return width_;
}
inline void VehicleParam::set_width(double value) {
  _has_bits_[0] |= 0x00000040u;
  width_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.width)
}

// optional double height = 9 [default = 1.5];
inline bool VehicleParam::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VehicleParam::clear_height() {
  height_ = 1.5;
  _has_bits_[0] &= ~0x00000080u;
}
inline double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.height)
  return height_;
}
inline void VehicleParam::set_height(double value) {
  _has_bits_[0] |= 0x00000080u;
  height_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.height)
}

// optional double min_turn_radius = 10 [default = 4.9];
inline bool VehicleParam::has_min_turn_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VehicleParam::clear_min_turn_radius() {
  min_turn_radius_ = 4.9;
  _has_bits_[0] &= ~0x00000100u;
}
inline double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.min_turn_radius)
  return min_turn_radius_;
}
inline void VehicleParam::set_min_turn_radius(double value) {
  _has_bits_[0] |= 0x00000100u;
  min_turn_radius_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.min_turn_radius)
}

// optional double max_acceleration = 11 [default = 8];
inline bool VehicleParam::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VehicleParam::clear_max_acceleration() {
  max_acceleration_ = 8;
  _has_bits_[0] &= ~0x00000200u;
}
inline double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.max_acceleration)
  return max_acceleration_;
}
inline void VehicleParam::set_max_acceleration(double value) {
  _has_bits_[0] |= 0x00000200u;
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.max_acceleration)
}

// optional double max_deceleration = 12 [default = -8];
inline bool VehicleParam::has_max_deceleration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VehicleParam::clear_max_deceleration() {
  max_deceleration_ = -8;
  _has_bits_[0] &= ~0x00000400u;
}
inline double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.max_deceleration)
  return max_deceleration_;
}
inline void VehicleParam::set_max_deceleration(double value) {
  _has_bits_[0] |= 0x00000400u;
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.max_deceleration)
}

// optional double max_steer_angle = 13 [default = 8.7266462599716466];
inline bool VehicleParam::has_max_steer_angle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VehicleParam::clear_max_steer_angle() {
  max_steer_angle_ = 8.7266462599716466;
  _has_bits_[0] &= ~0x00000800u;
}
inline double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.max_steer_angle)
  return max_steer_angle_;
}
inline void VehicleParam::set_max_steer_angle(double value) {
  _has_bits_[0] |= 0x00000800u;
  max_steer_angle_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.max_steer_angle)
}

// optional double max_steer_angle_rate = 14 [default = 8.55211];
inline bool VehicleParam::has_max_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VehicleParam::clear_max_steer_angle_rate() {
  max_steer_angle_rate_ = 8.55211;
  _has_bits_[0] &= ~0x00001000u;
}
inline double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.max_steer_angle_rate)
  return max_steer_angle_rate_;
}
inline void VehicleParam::set_max_steer_angle_rate(double value) {
  _has_bits_[0] |= 0x00001000u;
  max_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.max_steer_angle_rate)
}

// optional double min_steer_angle_rate = 15 [default = nan];
inline bool VehicleParam::has_min_steer_angle_rate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VehicleParam::clear_min_steer_angle_rate() {
  min_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00002000u;
}
inline double VehicleParam::min_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.min_steer_angle_rate)
  return min_steer_angle_rate_;
}
inline void VehicleParam::set_min_steer_angle_rate(double value) {
  _has_bits_[0] |= 0x00002000u;
  min_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.min_steer_angle_rate)
}

// optional double steer_ratio = 16 [default = 17.14335423];
inline bool VehicleParam::has_steer_ratio() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VehicleParam::clear_steer_ratio() {
  steer_ratio_ = 17.14335423;
  _has_bits_[0] &= ~0x00004000u;
}
inline double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.steer_ratio)
  return steer_ratio_;
}
inline void VehicleParam::set_steer_ratio(double value) {
  _has_bits_[0] |= 0x00004000u;
  steer_ratio_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.steer_ratio)
}

// optional double wheel_base = 17 [default = 2.72];
inline bool VehicleParam::has_wheel_base() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VehicleParam::clear_wheel_base() {
  wheel_base_ = 2.72;
  _has_bits_[0] &= ~0x00008000u;
}
inline double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.wheel_base)
  return wheel_base_;
}
inline void VehicleParam::set_wheel_base(double value) {
  _has_bits_[0] |= 0x00008000u;
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.wheel_base)
}

// optional double wheel_rolling_radius = 18 [default = nan];
inline bool VehicleParam::has_wheel_rolling_radius() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VehicleParam::clear_wheel_rolling_radius() {
  wheel_rolling_radius_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00010000u;
}
inline double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.wheel_rolling_radius)
  return wheel_rolling_radius_;
}
inline void VehicleParam::set_wheel_rolling_radius(double value) {
  _has_bits_[0] |= 0x00010000u;
  wheel_rolling_radius_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.wheel_rolling_radius)
}

// optional float max_abs_speed_when_stopped = 19 [default = 0.1];
inline bool VehicleParam::has_max_abs_speed_when_stopped() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleParam::clear_max_abs_speed_when_stopped() {
  max_abs_speed_when_stopped_ = 0.1f;
  _has_bits_[0] &= ~0x00000001u;
}
inline float VehicleParam::max_abs_speed_when_stopped() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.max_abs_speed_when_stopped)
  return max_abs_speed_when_stopped_;
}
inline void VehicleParam::set_max_abs_speed_when_stopped(float value) {
  _has_bits_[0] |= 0x00000001u;
  max_abs_speed_when_stopped_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.max_abs_speed_when_stopped)
}

// optional double brake_deadzone = 20 [default = nan];
inline bool VehicleParam::has_brake_deadzone() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VehicleParam::clear_brake_deadzone() {
  brake_deadzone_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00020000u;
}
inline double VehicleParam::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.brake_deadzone)
  return brake_deadzone_;
}
inline void VehicleParam::set_brake_deadzone(double value) {
  _has_bits_[0] |= 0x00020000u;
  brake_deadzone_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.brake_deadzone)
}

// optional double throttle_deadzone = 21 [default = nan];
inline bool VehicleParam::has_throttle_deadzone() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VehicleParam::clear_throttle_deadzone() {
  throttle_deadzone_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00040000u;
}
inline double VehicleParam::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:vehicle.VehicleParam.throttle_deadzone)
  return throttle_deadzone_;
}
inline void VehicleParam::set_throttle_deadzone(double value) {
  _has_bits_[0] |= 0x00040000u;
  throttle_deadzone_ = value;
  // @@protoc_insertion_point(field_set:vehicle.VehicleParam.throttle_deadzone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace vehicle

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_vehicle_5fparameters_2eproto
