// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planer_config.proto

#include "planer_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_planer_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PiecewiseJerkSpeedOptimizerConfig_planer_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planer_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WarmStartConfig_planer_5fconfig_2eproto;
namespace planing {
class PlannerOpenSpaceConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlannerOpenSpaceConfig> _instance;
} _PlannerOpenSpaceConfig_default_instance_;
class WarmStartConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WarmStartConfig> _instance;
} _WarmStartConfig_default_instance_;
class PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PiecewiseJerkSpeedOptimizerConfig> _instance;
} _PiecewiseJerkSpeedOptimizerConfig_default_instance_;
}  // namespace planing
static void InitDefaultsPlannerOpenSpaceConfig_planer_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planing::_PlannerOpenSpaceConfig_default_instance_;
    new (ptr) ::planing::PlannerOpenSpaceConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planing::PlannerOpenSpaceConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlannerOpenSpaceConfig_planer_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlannerOpenSpaceConfig_planer_5fconfig_2eproto}, {
      &scc_info_WarmStartConfig_planer_5fconfig_2eproto.base,}};

static void InitDefaultsWarmStartConfig_planer_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planing::_WarmStartConfig_default_instance_;
    new (ptr) ::planing::WarmStartConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planing::WarmStartConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WarmStartConfig_planer_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWarmStartConfig_planer_5fconfig_2eproto}, {
      &scc_info_PiecewiseJerkSpeedOptimizerConfig_planer_5fconfig_2eproto.base,}};

static void InitDefaultsPiecewiseJerkSpeedOptimizerConfig_planer_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planing::_PiecewiseJerkSpeedOptimizerConfig_default_instance_;
    new (ptr) ::planing::PiecewiseJerkSpeedOptimizerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planing::PiecewiseJerkSpeedOptimizerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PiecewiseJerkSpeedOptimizerConfig_planer_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPiecewiseJerkSpeedOptimizerConfig_planer_5fconfig_2eproto}, {}};

void InitDefaults_planer_5fconfig_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PlannerOpenSpaceConfig_planer_5fconfig_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WarmStartConfig_planer_5fconfig_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PiecewiseJerkSpeedOptimizerConfig_planer_5fconfig_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_planer_5fconfig_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_planer_5fconfig_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_planer_5fconfig_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_planer_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::planing::PlannerOpenSpaceConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planing::PlannerOpenSpaceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planing::PlannerOpenSpaceConfig, warm_start_config_),
  PROTOBUF_FIELD_OFFSET(::planing::PlannerOpenSpaceConfig, delta_t_),
  PROTOBUF_FIELD_OFFSET(::planing::PlannerOpenSpaceConfig, is_near_destination_threshold_),
  PROTOBUF_FIELD_OFFSET(::planing::PlannerOpenSpaceConfig, enable_check_parallel_trajectory_),
  PROTOBUF_FIELD_OFFSET(::planing::PlannerOpenSpaceConfig, enable_linear_interpolation_),
  PROTOBUF_FIELD_OFFSET(::planing::PlannerOpenSpaceConfig, is_near_destination_theta_threshold_),
  0,
  3,
  4,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, xy_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, phi_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, next_node_num_),
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, step_size_),
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, traj_forward_penalty_),
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, traj_back_penalty_),
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, traj_gear_switch_penalty_),
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, traj_steer_penalty_),
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, traj_steer_change_penalty_),
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, grid_a_star_xy_resolution_),
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, node_radius_),
  PROTOBUF_FIELD_OFFSET(::planing::WarmStartConfig, s_curve_config_),
  4,
  5,
  6,
  7,
  1,
  2,
  3,
  8,
  9,
  10,
  11,
  0,
  PROTOBUF_FIELD_OFFSET(::planing::PiecewiseJerkSpeedOptimizerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::planing::PiecewiseJerkSpeedOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::planing::PiecewiseJerkSpeedOptimizerConfig, acc_weight_),
  PROTOBUF_FIELD_OFFSET(::planing::PiecewiseJerkSpeedOptimizerConfig, jerk_weight_),
  PROTOBUF_FIELD_OFFSET(::planing::PiecewiseJerkSpeedOptimizerConfig, kappa_penalty_weight_),
  PROTOBUF_FIELD_OFFSET(::planing::PiecewiseJerkSpeedOptimizerConfig, ref_s_weight_),
  PROTOBUF_FIELD_OFFSET(::planing::PiecewiseJerkSpeedOptimizerConfig, ref_v_weight_),
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::planing::PlannerOpenSpaceConfig)},
  { 17, 34, sizeof(::planing::WarmStartConfig)},
  { 46, 56, sizeof(::planing::PiecewiseJerkSpeedOptimizerConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::planing::_PlannerOpenSpaceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planing::_WarmStartConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planing::_PiecewiseJerkSpeedOptimizerConfig_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_planer_5fconfig_2eproto = {
  {}, AddDescriptors_planer_5fconfig_2eproto, "planer_config.proto", schemas,
  file_default_instances, TableStruct_planer_5fconfig_2eproto::offsets,
  file_level_metadata_planer_5fconfig_2eproto, 3, file_level_enum_descriptors_planer_5fconfig_2eproto, file_level_service_descriptors_planer_5fconfig_2eproto,
};

const char descriptor_table_protodef_planer_5fconfig_2eproto[] =
  "\n\023planer_config.proto\022\007planing\"\237\002\n\026Plann"
  "erOpenSpaceConfig\0223\n\021warm_start_config\030\002"
  " \001(\0132\030.planing.WarmStartConfig\022\022\n\007delta_"
  "t\030\007 \001(\002:\0011\022,\n\035is_near_destination_thresh"
  "old\030\010 \001(\001:\0050.001\022/\n enable_check_paralle"
  "l_trajectory\030\t \001(\010:\005false\022*\n\033enable_line"
  "ar_interpolation\030\n \001(\010:\005false\0221\n#is_near"
  "_destination_theta_threshold\030\013 \001(\001:\0040.05"
  "\"\273\003\n\017WarmStartConfig\022\037\n\022xy_grid_resoluti"
  "on\030\001 \001(\001:\0030.1\022\"\n\023phi_grid_resolution\030\002 \001"
  "(\001:\0050.005\022\031\n\rnext_node_num\030\003 \001(\004:\00210\022\027\n\t"
  "step_size\030\004 \001(\001:\0040.05\022\037\n\024traj_forward_pe"
  "nalty\030\005 \001(\001:\0010\022\034\n\021traj_back_penalty\030\006 \001("
  "\001:\0010\022#\n\030traj_gear_switch_penalty\030\007 \001(\001:\001"
  "0\022\036\n\022traj_steer_penalty\030\010 \001(\001:\00250\022%\n\031tra"
  "j_steer_change_penalty\030\t \001(\001:\00225\022&\n\031grid"
  "_a_star_xy_resolution\030\017 \001(\001:\0030.1\022\030\n\013node"
  "_radius\030\020 \001(\001:\0030.5\022B\n\016s_curve_config\030\021 \001"
  "(\0132*.planing.PiecewiseJerkSpeedOptimizer"
  "Config\"\253\001\n!PiecewiseJerkSpeedOptimizerCo"
  "nfig\022\025\n\nacc_weight\030\001 \001(\001:\0011\022\027\n\013jerk_weig"
  "ht\030\002 \001(\001:\00210\022\"\n\024kappa_penalty_weight\030\003 \001"
  "(\001:\0041000\022\030\n\014ref_s_weight\030\004 \001(\001:\00210\022\030\n\014re"
  "f_v_weight\030\005 \001(\001:\00210"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_planer_5fconfig_2eproto = {
  false, InitDefaults_planer_5fconfig_2eproto, 
  descriptor_table_protodef_planer_5fconfig_2eproto,
  "planer_config.proto", &assign_descriptors_table_planer_5fconfig_2eproto, 940,
};

void AddDescriptors_planer_5fconfig_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_planer_5fconfig_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_planer_5fconfig_2eproto = []() { AddDescriptors_planer_5fconfig_2eproto(); return true; }();
namespace planing {

// ===================================================================

void PlannerOpenSpaceConfig::InitAsDefaultInstance() {
  ::planing::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->warm_start_config_ = const_cast< ::planing::WarmStartConfig*>(
      ::planing::WarmStartConfig::internal_default_instance());
}
class PlannerOpenSpaceConfig::HasBitSetters {
 public:
  static const ::planing::WarmStartConfig& warm_start_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_warm_start_config(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_delta_t(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_is_near_destination_threshold(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_enable_check_parallel_trajectory(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_enable_linear_interpolation(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_is_near_destination_theta_threshold(PlannerOpenSpaceConfig* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::planing::WarmStartConfig&
PlannerOpenSpaceConfig::HasBitSetters::warm_start_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->warm_start_config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlannerOpenSpaceConfig::kWarmStartConfigFieldNumber;
const int PlannerOpenSpaceConfig::kDeltaTFieldNumber;
const int PlannerOpenSpaceConfig::kIsNearDestinationThresholdFieldNumber;
const int PlannerOpenSpaceConfig::kEnableCheckParallelTrajectoryFieldNumber;
const int PlannerOpenSpaceConfig::kEnableLinearInterpolationFieldNumber;
const int PlannerOpenSpaceConfig::kIsNearDestinationThetaThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlannerOpenSpaceConfig::PlannerOpenSpaceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planing.PlannerOpenSpaceConfig)
}
PlannerOpenSpaceConfig::PlannerOpenSpaceConfig(const PlannerOpenSpaceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_warm_start_config()) {
    warm_start_config_ = new ::planing::WarmStartConfig(*from.warm_start_config_);
  } else {
    warm_start_config_ = nullptr;
  }
  ::memcpy(&enable_check_parallel_trajectory_, &from.enable_check_parallel_trajectory_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_near_destination_theta_threshold_) -
    reinterpret_cast<char*>(&enable_check_parallel_trajectory_)) + sizeof(is_near_destination_theta_threshold_));
  // @@protoc_insertion_point(copy_constructor:planing.PlannerOpenSpaceConfig)
}

void PlannerOpenSpaceConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlannerOpenSpaceConfig_planer_5fconfig_2eproto.base);
  ::memset(&warm_start_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_linear_interpolation_) -
      reinterpret_cast<char*>(&warm_start_config_)) + sizeof(enable_linear_interpolation_));
  delta_t_ = 1;
  is_near_destination_threshold_ = 0.001;
  is_near_destination_theta_threshold_ = 0.05;
}

PlannerOpenSpaceConfig::~PlannerOpenSpaceConfig() {
  // @@protoc_insertion_point(destructor:planing.PlannerOpenSpaceConfig)
  SharedDtor();
}

void PlannerOpenSpaceConfig::SharedDtor() {
  if (this != internal_default_instance()) delete warm_start_config_;
}

void PlannerOpenSpaceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlannerOpenSpaceConfig& PlannerOpenSpaceConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlannerOpenSpaceConfig_planer_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PlannerOpenSpaceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planing.PlannerOpenSpaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(warm_start_config_ != nullptr);
    warm_start_config_->Clear();
  }
  ::memset(&enable_check_parallel_trajectory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_linear_interpolation_) -
      reinterpret_cast<char*>(&enable_check_parallel_trajectory_)) + sizeof(enable_linear_interpolation_));
  if (cached_has_bits & 0x00000038u) {
    delta_t_ = 1;
    is_near_destination_threshold_ = 0.001;
    is_near_destination_theta_threshold_ = 0.05;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlannerOpenSpaceConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlannerOpenSpaceConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .planing.WarmStartConfig warm_start_config = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::planing::WarmStartConfig::_InternalParse;
        object = msg->mutable_warm_start_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional float delta_t = 7 [default = 1];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_delta_t(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional double is_near_destination_threshold = 8 [default = 0.001];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_is_near_destination_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional bool enable_check_parallel_trajectory = 9 [default = false];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_enable_check_parallel_trajectory(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool enable_linear_interpolation = 10 [default = false];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_enable_linear_interpolation(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_is_near_destination_theta_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlannerOpenSpaceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planing.PlannerOpenSpaceConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .planing.WarmStartConfig warm_start_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_warm_start_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta_t = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_delta_t(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_near_destination_threshold = 8 [default = 0.001];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_is_near_destination_threshold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_near_destination_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_check_parallel_trajectory = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_enable_check_parallel_trajectory(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_check_parallel_trajectory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_linear_interpolation = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_enable_linear_interpolation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_linear_interpolation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {
          HasBitSetters::set_has_is_near_destination_theta_threshold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_near_destination_theta_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planing.PlannerOpenSpaceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planing.PlannerOpenSpaceConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlannerOpenSpaceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planing.PlannerOpenSpaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .planing.WarmStartConfig warm_start_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::warm_start_config(this), output);
  }

  // optional float delta_t = 7 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->delta_t(), output);
  }

  // optional double is_near_destination_threshold = 8 [default = 0.001];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->is_near_destination_threshold(), output);
  }

  // optional bool enable_check_parallel_trajectory = 9 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_check_parallel_trajectory(), output);
  }

  // optional bool enable_linear_interpolation = 10 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_linear_interpolation(), output);
  }

  // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->is_near_destination_theta_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planing.PlannerOpenSpaceConfig)
}

::google::protobuf::uint8* PlannerOpenSpaceConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planing.PlannerOpenSpaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .planing.WarmStartConfig warm_start_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::warm_start_config(this), target);
  }

  // optional float delta_t = 7 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->delta_t(), target);
  }

  // optional double is_near_destination_threshold = 8 [default = 0.001];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->is_near_destination_threshold(), target);
  }

  // optional bool enable_check_parallel_trajectory = 9 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_check_parallel_trajectory(), target);
  }

  // optional bool enable_linear_interpolation = 10 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->enable_linear_interpolation(), target);
  }

  // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->is_near_destination_theta_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planing.PlannerOpenSpaceConfig)
  return target;
}

size_t PlannerOpenSpaceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planing.PlannerOpenSpaceConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .planing.WarmStartConfig warm_start_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *warm_start_config_);
    }

    // optional bool enable_check_parallel_trajectory = 9 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable_linear_interpolation = 10 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float delta_t = 7 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional double is_near_destination_threshold = 8 [default = 0.001];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlannerOpenSpaceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planing.PlannerOpenSpaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannerOpenSpaceConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PlannerOpenSpaceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planing.PlannerOpenSpaceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planing.PlannerOpenSpaceConfig)
    MergeFrom(*source);
  }
}

void PlannerOpenSpaceConfig::MergeFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planing.PlannerOpenSpaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_warm_start_config()->::planing::WarmStartConfig::MergeFrom(from.warm_start_config());
    }
    if (cached_has_bits & 0x00000002u) {
      enable_check_parallel_trajectory_ = from.enable_check_parallel_trajectory_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_linear_interpolation_ = from.enable_linear_interpolation_;
    }
    if (cached_has_bits & 0x00000008u) {
      delta_t_ = from.delta_t_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_near_destination_threshold_ = from.is_near_destination_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_near_destination_theta_threshold_ = from.is_near_destination_theta_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlannerOpenSpaceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planing.PlannerOpenSpaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerOpenSpaceConfig::CopyFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planing.PlannerOpenSpaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerOpenSpaceConfig::IsInitialized() const {
  return true;
}

void PlannerOpenSpaceConfig::Swap(PlannerOpenSpaceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlannerOpenSpaceConfig::InternalSwap(PlannerOpenSpaceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(warm_start_config_, other->warm_start_config_);
  swap(enable_check_parallel_trajectory_, other->enable_check_parallel_trajectory_);
  swap(enable_linear_interpolation_, other->enable_linear_interpolation_);
  swap(delta_t_, other->delta_t_);
  swap(is_near_destination_threshold_, other->is_near_destination_threshold_);
  swap(is_near_destination_theta_threshold_, other->is_near_destination_theta_threshold_);
}

::google::protobuf::Metadata PlannerOpenSpaceConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planer_5fconfig_2eproto);
  return ::file_level_metadata_planer_5fconfig_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WarmStartConfig::InitAsDefaultInstance() {
  ::planing::_WarmStartConfig_default_instance_._instance.get_mutable()->s_curve_config_ = const_cast< ::planing::PiecewiseJerkSpeedOptimizerConfig*>(
      ::planing::PiecewiseJerkSpeedOptimizerConfig::internal_default_instance());
}
class WarmStartConfig::HasBitSetters {
 public:
  static void set_has_xy_grid_resolution(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_phi_grid_resolution(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_next_node_num(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_step_size(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_traj_forward_penalty(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_traj_back_penalty(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_traj_gear_switch_penalty(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_traj_steer_penalty(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_traj_steer_change_penalty(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_grid_a_star_xy_resolution(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_node_radius(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static const ::planing::PiecewiseJerkSpeedOptimizerConfig& s_curve_config(const WarmStartConfig* msg);
  static void set_has_s_curve_config(WarmStartConfig* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::planing::PiecewiseJerkSpeedOptimizerConfig&
WarmStartConfig::HasBitSetters::s_curve_config(const WarmStartConfig* msg) {
  return *msg->s_curve_config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WarmStartConfig::kXyGridResolutionFieldNumber;
const int WarmStartConfig::kPhiGridResolutionFieldNumber;
const int WarmStartConfig::kNextNodeNumFieldNumber;
const int WarmStartConfig::kStepSizeFieldNumber;
const int WarmStartConfig::kTrajForwardPenaltyFieldNumber;
const int WarmStartConfig::kTrajBackPenaltyFieldNumber;
const int WarmStartConfig::kTrajGearSwitchPenaltyFieldNumber;
const int WarmStartConfig::kTrajSteerPenaltyFieldNumber;
const int WarmStartConfig::kTrajSteerChangePenaltyFieldNumber;
const int WarmStartConfig::kGridAStarXyResolutionFieldNumber;
const int WarmStartConfig::kNodeRadiusFieldNumber;
const int WarmStartConfig::kSCurveConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WarmStartConfig::WarmStartConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planing.WarmStartConfig)
}
WarmStartConfig::WarmStartConfig(const WarmStartConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_s_curve_config()) {
    s_curve_config_ = new ::planing::PiecewiseJerkSpeedOptimizerConfig(*from.s_curve_config_);
  } else {
    s_curve_config_ = nullptr;
  }
  ::memcpy(&traj_forward_penalty_, &from.traj_forward_penalty_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_radius_) -
    reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(node_radius_));
  // @@protoc_insertion_point(copy_constructor:planing.WarmStartConfig)
}

void WarmStartConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WarmStartConfig_planer_5fconfig_2eproto.base);
  ::memset(&s_curve_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&traj_gear_switch_penalty_) -
      reinterpret_cast<char*>(&s_curve_config_)) + sizeof(traj_gear_switch_penalty_));
  xy_grid_resolution_ = 0.1;
  phi_grid_resolution_ = 0.005;
  next_node_num_ = PROTOBUF_ULONGLONG(10);
  step_size_ = 0.05;
  traj_steer_penalty_ = 50;
  traj_steer_change_penalty_ = 25;
  grid_a_star_xy_resolution_ = 0.1;
  node_radius_ = 0.5;
}

WarmStartConfig::~WarmStartConfig() {
  // @@protoc_insertion_point(destructor:planing.WarmStartConfig)
  SharedDtor();
}

void WarmStartConfig::SharedDtor() {
  if (this != internal_default_instance()) delete s_curve_config_;
}

void WarmStartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WarmStartConfig& WarmStartConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WarmStartConfig_planer_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void WarmStartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planing.WarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(s_curve_config_ != nullptr);
    s_curve_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&traj_forward_penalty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&traj_gear_switch_penalty_) -
        reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(traj_gear_switch_penalty_));
    xy_grid_resolution_ = 0.1;
    phi_grid_resolution_ = 0.005;
    next_node_num_ = PROTOBUF_ULONGLONG(10);
    step_size_ = 0.05;
  }
  if (cached_has_bits & 0x00000f00u) {
    traj_steer_penalty_ = 50;
    traj_steer_change_penalty_ = 25;
    grid_a_star_xy_resolution_ = 0.1;
    node_radius_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WarmStartConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WarmStartConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double xy_grid_resolution = 1 [default = 0.1];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_xy_grid_resolution(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double phi_grid_resolution = 2 [default = 0.005];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_phi_grid_resolution(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional uint64 next_node_num = 3 [default = 10];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_next_node_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double step_size = 4 [default = 0.05];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_step_size(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double traj_forward_penalty = 5 [default = 0];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_traj_forward_penalty(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double traj_back_penalty = 6 [default = 0];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_traj_back_penalty(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double traj_gear_switch_penalty = 7 [default = 0];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_traj_gear_switch_penalty(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double traj_steer_penalty = 8 [default = 50];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_traj_steer_penalty(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double traj_steer_change_penalty = 9 [default = 25];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_traj_steer_change_penalty(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_grid_a_star_xy_resolution(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double node_radius = 16 [default = 0.5];
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 129) goto handle_unusual;
        msg->set_node_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .planing.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::planing::PiecewiseJerkSpeedOptimizerConfig::_InternalParse;
        object = msg->mutable_s_curve_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WarmStartConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planing.WarmStartConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double xy_grid_resolution = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_xy_grid_resolution(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xy_grid_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phi_grid_resolution = 2 [default = 0.005];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_phi_grid_resolution(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_grid_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 next_node_num = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_next_node_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_node_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double step_size = 4 [default = 0.05];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_step_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_forward_penalty = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_traj_forward_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_forward_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_back_penalty = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_traj_back_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_back_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_gear_switch_penalty = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_traj_gear_switch_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_gear_switch_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_steer_penalty = 8 [default = 50];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_traj_steer_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_steer_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_steer_change_penalty = 9 [default = 25];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {
          HasBitSetters::set_has_traj_steer_change_penalty(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_steer_change_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {
          HasBitSetters::set_has_grid_a_star_xy_resolution(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &grid_a_star_xy_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double node_radius = 16 [default = 0.5];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (129 & 0xFF)) {
          HasBitSetters::set_has_node_radius(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &node_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .planing.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_s_curve_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planing.WarmStartConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planing.WarmStartConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WarmStartConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planing.WarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xy_grid_resolution(), output);
  }

  // optional double phi_grid_resolution = 2 [default = 0.005];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->phi_grid_resolution(), output);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->next_node_num(), output);
  }

  // optional double step_size = 4 [default = 0.05];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->step_size(), output);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->traj_forward_penalty(), output);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->traj_back_penalty(), output);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->traj_gear_switch_penalty(), output);
  }

  // optional double traj_steer_penalty = 8 [default = 50];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->traj_steer_penalty(), output);
  }

  // optional double traj_steer_change_penalty = 9 [default = 25];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->traj_steer_change_penalty(), output);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->grid_a_star_xy_resolution(), output);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->node_radius(), output);
  }

  // optional .planing.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::s_curve_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planing.WarmStartConfig)
}

::google::protobuf::uint8* WarmStartConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planing.WarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xy_grid_resolution(), target);
  }

  // optional double phi_grid_resolution = 2 [default = 0.005];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->phi_grid_resolution(), target);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->next_node_num(), target);
  }

  // optional double step_size = 4 [default = 0.05];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->step_size(), target);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->traj_forward_penalty(), target);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->traj_back_penalty(), target);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->traj_gear_switch_penalty(), target);
  }

  // optional double traj_steer_penalty = 8 [default = 50];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->traj_steer_penalty(), target);
  }

  // optional double traj_steer_change_penalty = 9 [default = 25];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->traj_steer_change_penalty(), target);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->grid_a_star_xy_resolution(), target);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->node_radius(), target);
  }

  // optional .planing.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::s_curve_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planing.WarmStartConfig)
  return target;
}

size_t WarmStartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planing.WarmStartConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .planing.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *s_curve_config_);
    }

    // optional double traj_forward_penalty = 5 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double traj_back_penalty = 6 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double traj_gear_switch_penalty = 7 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double xy_grid_resolution = 1 [default = 0.1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double phi_grid_resolution = 2 [default = 0.005];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint64 next_node_num = 3 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_node_num());
    }

    // optional double step_size = 4 [default = 0.05];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double traj_steer_penalty = 8 [default = 50];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double traj_steer_change_penalty = 9 [default = 25];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double node_radius = 16 [default = 0.5];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WarmStartConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planing.WarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WarmStartConfig* source =
      ::google::protobuf::DynamicCastToGenerated<WarmStartConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planing.WarmStartConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planing.WarmStartConfig)
    MergeFrom(*source);
  }
}

void WarmStartConfig::MergeFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planing.WarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_s_curve_config()->::planing::PiecewiseJerkSpeedOptimizerConfig::MergeFrom(from.s_curve_config());
    }
    if (cached_has_bits & 0x00000002u) {
      traj_forward_penalty_ = from.traj_forward_penalty_;
    }
    if (cached_has_bits & 0x00000004u) {
      traj_back_penalty_ = from.traj_back_penalty_;
    }
    if (cached_has_bits & 0x00000008u) {
      traj_gear_switch_penalty_ = from.traj_gear_switch_penalty_;
    }
    if (cached_has_bits & 0x00000010u) {
      xy_grid_resolution_ = from.xy_grid_resolution_;
    }
    if (cached_has_bits & 0x00000020u) {
      phi_grid_resolution_ = from.phi_grid_resolution_;
    }
    if (cached_has_bits & 0x00000040u) {
      next_node_num_ = from.next_node_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      step_size_ = from.step_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      traj_steer_penalty_ = from.traj_steer_penalty_;
    }
    if (cached_has_bits & 0x00000200u) {
      traj_steer_change_penalty_ = from.traj_steer_change_penalty_;
    }
    if (cached_has_bits & 0x00000400u) {
      grid_a_star_xy_resolution_ = from.grid_a_star_xy_resolution_;
    }
    if (cached_has_bits & 0x00000800u) {
      node_radius_ = from.node_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WarmStartConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planing.WarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarmStartConfig::CopyFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planing.WarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarmStartConfig::IsInitialized() const {
  return true;
}

void WarmStartConfig::Swap(WarmStartConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WarmStartConfig::InternalSwap(WarmStartConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s_curve_config_, other->s_curve_config_);
  swap(traj_forward_penalty_, other->traj_forward_penalty_);
  swap(traj_back_penalty_, other->traj_back_penalty_);
  swap(traj_gear_switch_penalty_, other->traj_gear_switch_penalty_);
  swap(xy_grid_resolution_, other->xy_grid_resolution_);
  swap(phi_grid_resolution_, other->phi_grid_resolution_);
  swap(next_node_num_, other->next_node_num_);
  swap(step_size_, other->step_size_);
  swap(traj_steer_penalty_, other->traj_steer_penalty_);
  swap(traj_steer_change_penalty_, other->traj_steer_change_penalty_);
  swap(grid_a_star_xy_resolution_, other->grid_a_star_xy_resolution_);
  swap(node_radius_, other->node_radius_);
}

::google::protobuf::Metadata WarmStartConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planer_5fconfig_2eproto);
  return ::file_level_metadata_planer_5fconfig_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PiecewiseJerkSpeedOptimizerConfig::InitAsDefaultInstance() {
}
class PiecewiseJerkSpeedOptimizerConfig::HasBitSetters {
 public:
  static void set_has_acc_weight(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_jerk_weight(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_kappa_penalty_weight(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ref_s_weight(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ref_v_weight(PiecewiseJerkSpeedOptimizerConfig* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiecewiseJerkSpeedOptimizerConfig::kAccWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kJerkWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kKappaPenaltyWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kRefSWeightFieldNumber;
const int PiecewiseJerkSpeedOptimizerConfig::kRefVWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiecewiseJerkSpeedOptimizerConfig::PiecewiseJerkSpeedOptimizerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:planing.PiecewiseJerkSpeedOptimizerConfig)
}
PiecewiseJerkSpeedOptimizerConfig::PiecewiseJerkSpeedOptimizerConfig(const PiecewiseJerkSpeedOptimizerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_weight_, &from.acc_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&ref_v_weight_) -
    reinterpret_cast<char*>(&acc_weight_)) + sizeof(ref_v_weight_));
  // @@protoc_insertion_point(copy_constructor:planing.PiecewiseJerkSpeedOptimizerConfig)
}

void PiecewiseJerkSpeedOptimizerConfig::SharedCtor() {
  acc_weight_ = 1;
  jerk_weight_ = 10;
  kappa_penalty_weight_ = 1000;
  ref_s_weight_ = 10;
  ref_v_weight_ = 10;
}

PiecewiseJerkSpeedOptimizerConfig::~PiecewiseJerkSpeedOptimizerConfig() {
  // @@protoc_insertion_point(destructor:planing.PiecewiseJerkSpeedOptimizerConfig)
  SharedDtor();
}

void PiecewiseJerkSpeedOptimizerConfig::SharedDtor() {
}

void PiecewiseJerkSpeedOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PiecewiseJerkSpeedOptimizerConfig& PiecewiseJerkSpeedOptimizerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PiecewiseJerkSpeedOptimizerConfig_planer_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PiecewiseJerkSpeedOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planing.PiecewiseJerkSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    acc_weight_ = 1;
    jerk_weight_ = 10;
    kappa_penalty_weight_ = 1000;
    ref_s_weight_ = 10;
    ref_v_weight_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PiecewiseJerkSpeedOptimizerConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PiecewiseJerkSpeedOptimizerConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double acc_weight = 1 [default = 1];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_acc_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double jerk_weight = 2 [default = 10];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_jerk_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double kappa_penalty_weight = 3 [default = 1000];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_kappa_penalty_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double ref_s_weight = 4 [default = 10];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_ref_s_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double ref_v_weight = 5 [default = 10];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_ref_v_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PiecewiseJerkSpeedOptimizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planing.PiecewiseJerkSpeedOptimizerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double acc_weight = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_acc_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_weight = 2 [default = 10];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_jerk_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa_penalty_weight = 3 [default = 1000];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_kappa_penalty_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_penalty_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_s_weight = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_ref_s_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_s_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_v_weight = 5 [default = 10];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_ref_v_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_v_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planing.PiecewiseJerkSpeedOptimizerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planing.PiecewiseJerkSpeedOptimizerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PiecewiseJerkSpeedOptimizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planing.PiecewiseJerkSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_weight(), output);
  }

  // optional double jerk_weight = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->jerk_weight(), output);
  }

  // optional double kappa_penalty_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->kappa_penalty_weight(), output);
  }

  // optional double ref_s_weight = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ref_s_weight(), output);
  }

  // optional double ref_v_weight = 5 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ref_v_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:planing.PiecewiseJerkSpeedOptimizerConfig)
}

::google::protobuf::uint8* PiecewiseJerkSpeedOptimizerConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:planing.PiecewiseJerkSpeedOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_weight(), target);
  }

  // optional double jerk_weight = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->jerk_weight(), target);
  }

  // optional double kappa_penalty_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->kappa_penalty_weight(), target);
  }

  // optional double ref_s_weight = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ref_s_weight(), target);
  }

  // optional double ref_v_weight = 5 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ref_v_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planing.PiecewiseJerkSpeedOptimizerConfig)
  return target;
}

size_t PiecewiseJerkSpeedOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planing.PiecewiseJerkSpeedOptimizerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double acc_weight = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 2 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double kappa_penalty_weight = 3 [default = 1000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double ref_s_weight = 4 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double ref_v_weight = 5 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PiecewiseJerkSpeedOptimizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planing.PiecewiseJerkSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecewiseJerkSpeedOptimizerConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PiecewiseJerkSpeedOptimizerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planing.PiecewiseJerkSpeedOptimizerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planing.PiecewiseJerkSpeedOptimizerConfig)
    MergeFrom(*source);
  }
}

void PiecewiseJerkSpeedOptimizerConfig::MergeFrom(const PiecewiseJerkSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planing.PiecewiseJerkSpeedOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      acc_weight_ = from.acc_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      kappa_penalty_weight_ = from.kappa_penalty_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      ref_s_weight_ = from.ref_s_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      ref_v_weight_ = from.ref_v_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiecewiseJerkSpeedOptimizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planing.PiecewiseJerkSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseJerkSpeedOptimizerConfig::CopyFrom(const PiecewiseJerkSpeedOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planing.PiecewiseJerkSpeedOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkSpeedOptimizerConfig::IsInitialized() const {
  return true;
}

void PiecewiseJerkSpeedOptimizerConfig::Swap(PiecewiseJerkSpeedOptimizerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiecewiseJerkSpeedOptimizerConfig::InternalSwap(PiecewiseJerkSpeedOptimizerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(acc_weight_, other->acc_weight_);
  swap(jerk_weight_, other->jerk_weight_);
  swap(kappa_penalty_weight_, other->kappa_penalty_weight_);
  swap(ref_s_weight_, other->ref_s_weight_);
  swap(ref_v_weight_, other->ref_v_weight_);
}

::google::protobuf::Metadata PiecewiseJerkSpeedOptimizerConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_planer_5fconfig_2eproto);
  return ::file_level_metadata_planer_5fconfig_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planing
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::planing::PlannerOpenSpaceConfig* Arena::CreateMaybeMessage< ::planing::PlannerOpenSpaceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planing::PlannerOpenSpaceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::planing::WarmStartConfig* Arena::CreateMaybeMessage< ::planing::WarmStartConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planing::WarmStartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::planing::PiecewiseJerkSpeedOptimizerConfig* Arena::CreateMaybeMessage< ::planing::PiecewiseJerkSpeedOptimizerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planing::PiecewiseJerkSpeedOptimizerConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
